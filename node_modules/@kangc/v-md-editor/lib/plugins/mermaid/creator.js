"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = creator;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _markdownItMermaid = _interopRequireDefault(require("../../utils/markdown-it-mermaid"));

require("./mermaid.css");

var _deepAssign = require("../../utils/deep-assign");

var extendMarkdown = function extendMarkdown(mdParser) {
  if (mdParser) {
    mdParser.use(_markdownItMermaid.default);
  }
};

function getPreviewEl(el) {
  var previewElClass = 'v-md-editor-preview';
  return el.classList.contains(previewElClass) ? el : el.querySelector("." + previewElClass);
}

function creator(mermaid) {
  return function createMermaidPlugin(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$mermaidInitializ = _ref.mermaidInitializeOptions,
        mermaidInitializeOptions = _ref$mermaidInitializ === void 0 ? {} : _ref$mermaidInitializ;

    var initialize = {
      altFontFamily: 'sans-serif',
      flowchart: {
        htmlLabels: true,
        useMaxWidth: true
      },
      fontFamily: 'sans-serif',
      gantt: {
        leftPadding: 75,
        rightPadding: 20
      },
      securityLevel: 'loose',
      sequence: {
        boxMargin: 8,
        diagramMarginX: 8,
        diagramMarginY: 8,
        useMaxWidth: true
      },
      startOnLoad: false
    };
    (0, _deepAssign.deepAssign)(initialize, mermaidInitializeOptions);
    return {
      install: function install(VMdEditor) {
        VMdEditor.extendMarkdown(extendMarkdown);
        if (!VMdEditor.mixins) VMdEditor.mixins = [];
        VMdEditor.mixins.push({
          created: function created() {
            mermaid.initialize(initialize);
          },
          watch: {
            value: {
              immediate: true,
              handler: function handler() {
                var _this = this;

                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                  var previewEl, eles, parseSuccess;
                  return _regenerator.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return _this.$nextTick();

                        case 2:
                          previewEl = getPreviewEl(_this.$el);
                          eles = previewEl.querySelectorAll('.v-md-mermaid');

                          if (eles.length) {
                            _context.next = 6;
                            break;
                          }

                          return _context.abrupt("return");

                        case 6:
                          parseSuccess = false;
                          eles.forEach(function (ele) {
                            try {
                              parseSuccess = mermaid.parse(ele.innerText);
                            } catch (e) {
                              if (!e.str) {
                                console.log(e);
                              }
                            }

                            if (parseSuccess) mermaid.init(null, ele);
                          });

                        case 8:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))();
              }
            }
          }
        });
      }
    };
  };
}