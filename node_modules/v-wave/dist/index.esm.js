const DEFAULT_PLUGIN_OPTIONS = {
    directive: 'wave',
    color: 'currentColor',
    initialOpacity: 0.2,
    finalOpacity: 0.1,
    duration: 0.4,
    easing: 'ease-out',
    cancellationPeriod: 75
};

const createContainer = ({ borderTopLeftRadius, borderTopRightRadius, borderBottomLeftRadius, borderBottomRightRadius }) => {
    const waveContainer = document.createElement('div');
    waveContainer.style.top = '0';
    waveContainer.style.left = '0';
    waveContainer.style.width = '100%';
    waveContainer.style.height = '100%';
    waveContainer.style.position = 'absolute';
    waveContainer.style.borderRadius = `${borderTopLeftRadius} ${borderTopRightRadius} ${borderBottomRightRadius} ${borderBottomLeftRadius}`;
    waveContainer.style.overflow = 'hidden';
    waveContainer.style.pointerEvents = 'none';
    return waveContainer;
};

const createWaveElement = (x, y, size, options) => {
    const waveElement = document.createElement('div');
    waveElement.style.position = 'absolute';
    waveElement.style.width = `${size}px`;
    waveElement.style.height = `${size}px`;
    waveElement.style.top = `${y}px`;
    waveElement.style.left = `${x}px`;
    waveElement.style.background = options.color;
    waveElement.style.borderRadius = '50%';
    waveElement.style.opacity = `${options.initialOpacity}`;
    waveElement.style.transform = `translate(-50%,-50%) scale(0)`;
    waveElement.style.transition = `transform ${options.duration}s ${options.easing}, opacity ${options.duration}s ${options.easing}`;
    return waveElement;
};

function magnitude(x1, y1, x2, y2) {
    const deltaX = x1 - x2;
    const deltaY = y1 - y2;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
}

function getDistanceToFurthestCorner(x, y, width, height) {
    const topLeft = magnitude(x, y, 0, 0);
    const topRight = magnitude(x, y, width, 0);
    const bottomLeft = magnitude(x, y, 0, height);
    const bottomRight = magnitude(x, y, width, height);
    return Math.max(topLeft, topRight, bottomLeft, bottomRight);
}

const getPointerLocation = ({ x, y }, top, left) => ({
    x: x - left,
    y: y - top
});

const wave = (event, el, options) => {
    const { top, left, width, height } = el.getBoundingClientRect();
    const computedStyles = window.getComputedStyle(el);
    const { x, y } = getPointerLocation(event, top, left);
    const size = 2.05 * getDistanceToFurthestCorner(x, y, width, height);
    const waveContainer = createContainer(computedStyles);
    const waveEl = createWaveElement(x, y, size, options);
    if (computedStyles.position === 'static')
        el.style.position = 'relative';
    waveContainer.appendChild(waveEl);
    el.appendChild(waveContainer);
    let shouldDissolveWave = false;
    const releaseWave = (e) => {
        if (typeof e !== 'undefined') {
            document.removeEventListener('pointerup', releaseWave);
            document.removeEventListener('pointercancel', releaseWave);
        }
        if (shouldDissolveWave)
            dissolveWave();
        else
            shouldDissolveWave = true;
    };
    const dissolveWave = () => {
        waveEl.style.transition = 'opacity 150ms linear';
        waveEl.style.opacity = '0';
        setTimeout(() => waveContainer.remove(), 150);
    };
    document.addEventListener('pointerup', releaseWave);
    document.addEventListener('pointercancel', releaseWave);
    const token = setTimeout(() => {
        document.removeEventListener('pointercancel', cancelWave);
        requestAnimationFrame(() => {
            waveEl.style.transform = `translate(-50%,-50%) scale(1)`;
            waveEl.style.opacity = `${options.finalOpacity}`;
            setTimeout(() => releaseWave(), options.duration * 1000);
        });
    }, options.cancellationPeriod);
    const cancelWave = () => {
        clearTimeout(token);
        waveContainer.remove();
        document.removeEventListener('pointerup', releaseWave);
        document.removeEventListener('pointercancel', releaseWave);
        document.removeEventListener('pointercancel', cancelWave);
    };
    document.addEventListener('pointercancel', cancelWave);
};

const optionMap = new WeakMap();
const VWave = {
    install(Vue, globalUserOptions = {}) {
        if (this.installed)
            return;
        this.installed = true;
        const globalOptions = Object.assign(Object.assign({}, DEFAULT_PLUGIN_OPTIONS), globalUserOptions);
        Vue.directive(globalOptions.directive, {
            inserted(el, { value }) {
                optionMap.set(el, value !== null && value !== void 0 ? value : {});
                el.addEventListener('pointerdown', (event) => {
                    wave(event, el, Object.assign(Object.assign({}, globalOptions), optionMap.get(el)));
                });
            },
            update(el, { value }) {
                optionMap.set(el, value !== null && value !== void 0 ? value : {});
            }
        });
    }
};
if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(VWave);
}

export default VWave;
