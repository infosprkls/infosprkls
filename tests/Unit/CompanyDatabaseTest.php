<?php

namespace Tests\Unit;

use App\Company;
use CompanySeeder;
use HoursSeeder;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CompanyDatabaseTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


//        $this->c = factory(Company::class)->create();
        $this->c = Company::all()->random();
    }

    /**
     * Tests if company has a contact user
     * @test
     * @return void
     */
    public function testCompanyHasContactUser()
    {
        $this->assertInstanceOf('App\User', $this->c->contactUser);
    }

    /**
     testC s if company has a created by user
     * @test
     * @return void
     */
    public function testCompanyHasCreatedByUser()
    {
        $this->assertInstanceOf('App\User', $this->c->createdBy);
    }

    /**
     testC s if company has a project
     * @test
     * @return void
     */
    public function testCompanyHasProjects()
    {
        $this->assertInstanceOf('App\Project', $this->c->projects->first());
    }

    /**
     testC s if company has a user
     * @test
     * @return void
     */
    public function testCompanyHasUsers()
    {
        $this->assertInstanceOf('App\User', $this->c->users->first());
    }

    /**
     testC s if company has a location
     * @test
     * @return void
     */
    public function testCompanyHasLocations()
    {
        $this->assertInstanceOf('App\Location', $this->c->locations->first());
    }

    /**
     testC s if company has a booked hour through a user
     * @test
     * @return void
     */
    public function testCompanyHasHoursBookedByUsers(){
        $this->assertInstanceOf('App\Hour', $this->c->hoursBookedByUsers->first());
    }





}
